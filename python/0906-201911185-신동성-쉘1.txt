 ds@sindongseong-ui-MacBookAir  /etc  python3
Python 3.11.4 (main, Jun 20 2023, 17:23:00) [Clang 14.0.3 (clang-1403.0.22.14.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> print()

>>> print("hello")
hello
>>> print("hello", "world")
hello world
>>> print("Hello\nWorld")
Hello
World
>>> num
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'num' is not defined. Did you mean: 'sum'?
>>> num = 1
>>> num
1
>>> 2+3
5
>>> "Hello\nWorld"
'Hello\nWorld'
>>> print("hello",end=" "), print("world")
hello world
(None, None)
>>> print("Hello"), print("world")
Hello
world
(None, None)
>>>
>>> input()
3
'3'
>>> input("숫자입력:")
숫자입력:3
'3'
>>> x = input('number:')
number:3
>>> x
'3'
>>> x=int(input("number"))
number3
>>> x
3
>>> type(1)
<class 'int'>
>>> type(x)
<class 'int'>
>>> type(input())
wef
<class 'str'>
>>> d=d
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'd' is not defined. Did you mean: 'id'?
>>> d==d
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'd' is not defined. Did you mean: 'id'?
>>> "d"="d"
  File "<stdin>", line 1
    "d"="d"
    ^^^
SyntaxError: cannot assign to literal here. Maybe you meant '==' instead of '='?
>>> "d"=="d"
True
>>> type("d"=="d")
<class 'bool'>
>>> print(True+False)
1
>>> print(True*False)
0
>>> int("1")+int("2")
3
>>> python -u "/Users/ds/ds_study/note3-2/python/0906-201911185-신동성-1.py"
  File "<stdin>", line 1
    python -u "/Users/ds/ds_study/note3-2/python/0906-201911185-신동성-1.py"
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SyntaxError: invalid syntax
>>> import keyword
>>> keyword.
  File "<stdin>", line 1
    keyword.
            ^
SyntaxError: invalid syntax
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
>>> x, y = 1, 2
>>> x,y
(1, 2)
>>> x,y = y,x
>>> x,y
(2, 1)
>>> 3/2
1.5
>>> 4//2
2
>>> 4/2
2.0
>>> 성별='남'
>>> 성별=='여'
False
>>> 성별=='남'
True
>>> age = 20
>>> age >= 19
True
>>> not age >= 19
False
>>> if age:
... print("OK")
  File "<stdin>", line 2
    print("OK")
    ^
IndentationError: expected an indented block after 'if' statement on line 1
>>> if age:
...     print("OK")
...
OK
>>> print('%d'%80)
80
>>> print("%5d"%80)
   80
>>> print("%05d"%80)
00080
>>> print("%15d"%80)
             80
>>> print("값:%05d"%80)
값:00080
>>> print("값=%05d"%80)
값=00080
>>> print("%f" %3.14)
3.140000
>>> print("%.2f" %3.14)
3.14
>>> print("%5.2f" %3.14)
 3.14
>>> print("%5.2f" %pi)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pi' is not defined
>>> pi = 3.141592
>>> print("%d" %pi)
3
>>> print("%s" %pi)
3.141592
>>> a, b = 80, 99
>>> name = 'ds'
>>> print("이름:%s, 영어:%d, 수학:%d" %(name,a,b))
이름:ds, 영어:80, 수학:99
>>> 'a'.format(10)
'a'
>>> 'a{}'.format(10)
'a10'
>>> '{}a{}'.format(10,20)
'10a20'
>>> print("이름:{1},나이:{0]세".format(20,"ds"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: expected '}' before end of string
>>> print("이름:{1},나이:{0]세".format(20,ds))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'ds' is not defined
>>> name = ds
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'ds' is not defined
>>> name = "ds"
>>> age = 24
>>> print("이름:{1},나이:{0]세".format(name,age))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: expected '}' before end of string
>>> print("이름:{1},나이:{0 }세.format(name,age))
이름:24,나이:ds세
>>> print("이름:{0},나이:{0}세".format(name,age))
이름:ds,나이:ds세
>>> b = 1.234
>>> c = 5.6789
>>> print("{0:.1f}, {1:.2f}".formant(b,c))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'str' object has no attribute 'formant'. Did you mean: 'format'?
>>> print("{0:.1f}, {1:.2f}".format(b,c))
1.2, 5.68
>>> a = 5
>>> b = 1.234
>>> print(f"{a:d}, {b:.2f}")
5, 1.23
>>>